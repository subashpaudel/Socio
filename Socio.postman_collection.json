{
	"info": {
		"_postman_id": "2c28e230-dfdb-4a9f-9629-5b2aa79f2a5d",
		"name": "Socio Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let authHeader = pm.response.headers.get('Authorization');\r",
							"pm.collectionVariables.set('authToken', 'Bearer '+authHeader);\r",
							"\r",
							"// Assertions\r",
							"\r",
							"const jsonData =  pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"pm.test(\"Validation Status Code is 200 and Request parameter Verification\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"code\");\r",
							"    pm.expect(jsonData.code).to.eql(0);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.eql(\"Login Successful\");\r",
							"});\r",
							"\r",
							"pm.test(\" Response time\",function()\r",
							"{\r",
							"   \r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"superadmin\",\r\n    \"password\" : \"MTIzNDU2q\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/v1/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Assertions\r",
							"\r",
							"const jsonData =  pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"pm.test(\"Validation Status Code is 200 and Request parameter Verification\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"code\");\r",
							"    pm.expect(jsonData.code).to.eql(0);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.eql(\"Branch has been created successfully\");\r",
							"});\r",
							"\r",
							"pm.test(\" Response time\",function()\r",
							"{\r",
							"   \r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const code = pm.variables.replaceIn('{{$randomInt}}');\r",
							"const branch_name = pm.variables.replaceIn('{{$randomFullName}}');\r",
							"console.log(branch_name);\r",
							"pm.collectionVariables.set(\"branch_code\",code);\r",
							"pm.collectionVariables.set(\"branch\",branch_name)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{branch}}\",\r\n    \"code\": \"{{branch_code}}\",\r\n    \"province\": \"Province 1\",\r\n    \"address\" : \"address\",\r\n    \"phoneNumber\": \"544025\",\r\n    \"faxNumber\": \"9821446480\",\r\n    \"email\": \"abc@gmail.com\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/v1/branch/create",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"branch",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Branch View",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Assertions\r",
							"\r",
							"const jsonData =  pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"pm.test(\"Validation Status Code is 200 and Request parameter Verification\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"code\");\r",
							"    pm.expect(jsonData.code).to.eql(0);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.eql(\"Branch List has been fetched successfully.\");\r",
							"});\r",
							"\r",
							"pm.test(\" Response time\",function()\r",
							"{\r",
							"   \r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"\r",
							"});\r",
							"\r",
							"// validating particular branch name is there or not \r",
							"pm.test(\" Validation Created Branch Name is present \",() => {\r",
							"   // _.each(jsonData.data, (item) => {\r",
							"     //   console.log(item);\r",
							"       // let result = jsonData.data.find(item => item.name == \"{{branch}}\")\r",
							"       // console.log(result);\r",
							"      //  pm.expect(result.name).to.equal(\"{{branch}}\")\r",
							"\r",
							"        const branch = jsonData.data.find(item => item.name == pm.collectionVariables.get(\"branch\"));\r",
							"        pm.expect(branch.name).to.equal(pm.collectionVariables.get(\"branch\"));\r",
							"        console.log(branch)\r",
							"        const id = branch.id ;\r",
							"        pm.collectionVariables.set(\"branch_id\",id);\r",
							"//})\r",
							"   \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/v1/branch/list-options",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"branch",
						"list-options"
					]
				}
			},
			"response": []
		},
		{
			"name": "Branch View Detail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Assertions\r",
							"\r",
							"const jsonData =  pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"pm.test(\"Validation Status Code is 200 and Request parameter Verification\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"code\");\r",
							"    pm.expect(jsonData.code).to.eql(0);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.eql(\"Branch Detail\");\r",
							"});\r",
							"\r",
							"pm.test(\" Response time\",function()\r",
							"{\r",
							"   \r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"\r",
							"});\r",
							"\r",
							"// validating particular branch name is there or not \r",
							"pm.test(\" Validation to View detail of Created Branch is present \",() => {\r",
							"  //  _.each(jsonData.data, (item) => {\r",
							"    //    console.log(item);\r",
							"       // let result = jsonData.data.find(item => item.name == \"{{branch}}\")\r",
							"       // console.log(result);\r",
							"        pm.expect(jsonData.data.name).to.equal(pm.collectionVariables.get(\"branch\"));\r",
							"        console.log(jsonData.data.name)\r",
							"\r",
							"       pm.expect(jsonData.data.code).to.equal(pm.collectionVariables.get(\"branch_code\"));\r",
							"        console.log(jsonData.data.code)\r",
							"\r",
							"       // pm.expect(jsonData.data.id).to.equal(pm.collectionVariables.get(\"branch_id\"));\r",
							"       // console.log(jsonData.data.id)\r",
							"//})\r",
							"   \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authToken}}",
						"type": "text"
					},
					{
						"key": "id",
						"value": "{{branch_id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/v1/branch/detail/{{branch_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"branch",
						"detail",
						"{{branch_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Assertions\r",
							"\r",
							"const jsonData =  pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"pm.test(\"Validation Status Code is 200 and Request parameter Verification\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"code\");\r",
							"    pm.expect(jsonData.code).to.eql(0);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.eql(\"Branch has been updated successfully\");\r",
							"});\r",
							"\r",
							"pm.test(\" Response time\",function()\r",
							"{\r",
							"   \r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const code = pm.variables.replaceIn('{{$randomInt}}');\r",
							"const branch_name = pm.variables.replaceIn('{{$randomFullName}}');\r",
							"console.log(branch_name);\r",
							"pm.collectionVariables.set(\"code\",code);\r",
							"pm.collectionVariables.set(\"branch\",branch_name)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{branch_id}},\r\n  \"name\": \"{{branch}}\",\r\n  \"code\": \"{{branch_code}}\",\r\n  \"province\": \"Province 1\",\r\n  \"address\": \"address\",\r\n  \"phoneNumber\": \"544025\",\r\n  \"faxNumber\": \"9821446480\",\r\n  \"email\": \"abc@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/v1/branch/edit",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"branch",
						"edit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Branch View After Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Assertions\r",
							"\r",
							"const jsonData =  pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"pm.test(\"Validation Status Code is 200 and Request parameter Verification\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"code\");\r",
							"    pm.expect(jsonData.code).to.eql(0);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.eql(\"Branch List has been fetched successfully.\");\r",
							"});\r",
							"\r",
							"pm.test(\" Response time\",function()\r",
							"{\r",
							"   \r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"\r",
							"});\r",
							"\r",
							"// validating particular branch name is there or not \r",
							"pm.test(\" Validation Created Branch Name is present \",() => {\r",
							"   // _.each(jsonData.data, (item) => {\r",
							"     //   console.log(item);\r",
							"       // let result = jsonData.data.find(item => item.name == \"{{branch}}\")\r",
							"       // console.log(result);\r",
							"      //  pm.expect(result.name).to.equal(\"{{branch}}\")\r",
							"\r",
							"        const branch = jsonData.data.find(item => item.name == pm.collectionVariables.get(\"branch\"));\r",
							"        pm.expect(branch.name).to.equal(pm.collectionVariables.get(\"branch\"));\r",
							"        console.log(branch)\r",
							"        const id = branch.id ;\r",
							"        pm.collectionVariables.set(\"branch_id\",id);\r",
							"//})\r",
							"   \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const code = pm.variables.replaceIn('{{$randomInt}}');\r",
							"console.log(code);\r",
							"pm.collectionVariables.set(\"code\",code)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/v1/branch/list-options",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"branch",
						"list-options"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Assertions\r",
							"\r",
							"const jsonData =  pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"pm.test(\"Validation Status Code is 200 and Request parameter Verification\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"code\");\r",
							"    pm.expect(jsonData.code).to.eql(0);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.eql(\"Branch Deleted Successfully\");\r",
							"});\r",
							"\r",
							"pm.test(\" Response time\",function()\r",
							"{\r",
							"   \r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authToken}}",
						"type": "text"
					},
					{
						"key": "branch_id",
						"value": "{{branch_id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\" : {{branch_id}},\r\n    \"remarks\" : \"Unblocked\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/v1/branch/delete",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"branch",
						"delete"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Branch Already Deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Assertions\r",
							"\r",
							"const jsonData =  pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"pm.test(\"Validation Status Code is 400 and Request parameter Verification\",function()\r",
							"{\r",
							"    pm.response.to.have.status(400);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"code\");\r",
							"    pm.expect(jsonData.code).to.eql(-1);\r",
							"\r",
							"    pm.expect(jsonData).have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.eql(\"Branch has already been deleted.\");\r",
							"});\r",
							"\r",
							"pm.test(\" Response time\",function()\r",
							"{\r",
							"   \r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authToken}}",
						"type": "text"
					},
					{
						"key": "branch_id",
						"value": "{{branch_id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\" : {{branch_id}},\r\n    \"remarks\" : \"Unblocked\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/v1/branch/delete",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"branch",
						"delete"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authToken",
			"value": ""
		},
		{
			"key": "branch_code",
			"value": "",
			"type": "string"
		},
		{
			"key": "branch",
			"value": "",
			"type": "string"
		},
		{
			"key": "branch_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "code",
			"value": ""
		}
	]
}